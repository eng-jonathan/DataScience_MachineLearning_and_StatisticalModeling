library(dplyr)
library(magrittr)
library(tidyverse)
library(stringr)
library(YARF)
library(missForest)
library(glmnet)
library(broom)
library(randomForest)
#import HousingData
HousingData = read.csv(file.path("housing_data_2016_2017.csv"), header = TRUE)
#Remove all observations without the Y components "sale_price"
HousingData = HousingData[!is.na(HousingData$sale_price), ]
#Remove Columns that are "Junk" or all NA's
HousingData %<>%
select(-c(HITId, HITTypeId, Title, Description, Keywords, Reward, CreationTime, MaxAssignments, RequesterAnnotation,
AssignmentDurationInSeconds, AutoApprovalDelayInSeconds, Expiration, NumberOfSimilarHITs, LifetimeInSeconds,
AssignmentId, WorkerId, AssignmentStatus, AcceptTime, SubmitTime, AutoApprovalTime, ApprovalTime, RejectionTime,
RequesterFeedback, WorkTimeInSeconds, LifetimeApprovalRate, Last30DaysApprovalRate, Last7DaysApprovalRate,
date_of_sale, url, full_address_or_zip_code, model_type, listing_price_to_nearest_1000, community_district_num))
HousingData %<>%
#tolower to fix varying answer capitalizatoin formats
mutate_at( c("cats_allowed", "dogs_allowed", "coop_condo", "dining_room_type", "fuel_type", "kitchen_type"), tolower) %<>%
#Strip Currency Symbols to make numeric features
mutate(common_charges = as.numeric(gsub("\\$", "", common_charges))) %<>%
mutate(maintenance_cost = as.numeric(gsub("\\$", "", maintenance_cost))) %<>%
mutate(parking_charges = as.numeric(gsub("\\$", "", parking_charges))) %<>%
mutate(sale_price = gsub("\\$", "", sale_price)) %<>%
mutate(sale_price = as.numeric(gsub("\\,", "", sale_price))) %<>%
mutate(total_taxes = as.numeric(gsub("\\$", "", total_taxes))) %<>%
#Fix issues with various synonoms for "yes"
mutate(cats_allowed =  ifelse(cats_allowed == "no", 0, 1)) %<>% #Due to multiple yes values we use no to make binary
mutate(dogs_allowed = ifelse(dogs_allowed == "no", 0, 1)) %<>%
#Create a more convienient, possibly more influential variable
mutate(pets_allowed = ifelse(cats_allowed + dogs_allowed == 0, 0, 1)) %<>%
mutate(fees = ifelse( is.na(common_charges) & is.na(maintenance_cost),  NA,
ifelse( is.na(common_charges), maintenance_cost,
ifelse( is.na(maintenance_cost), common_charges, maintenance_cost + common_charges )))) %<>%
select(-c(cats_allowed, dogs_allowed, common_charges, maintenance_cost)) %<>% #no longer needed
mutate(garage_exists = ifelse( is.na(garage_exists), 0, 1)) %<>%
mutate(coop_else_condo = ifelse(coop_condo == "condo", 0, 1)) %<>%
select(-coop_condo) %<>% #no longer needed
#Fix inconsistent location entries, extracted zip codes from URL
mutate(zip = as.numeric( str_extract( sapply(URL, substring, 45,  150), "\\d{5}"))) %<>%
select(-(URL)) %<>% #no longer needed
#Turns chars into factors
mutate(dining_room_type = as.factor(dining_room_type)) %<>%
mutate(fuel_type = as.factor(fuel_type)) %<>%
mutate(kitchen_type = as.factor(kitchen_type)) %<>%
mutate(fuel_type = as.factor(fuel_type)) %<>%
#Group zip codes instead of having several factors and remove any non-Queens zipcodes if there are any
mutate(area = as.factor(
ifelse(zip>=11361 & zip<=11364, "Northeast Queens",
ifelse(zip>=11354 & zip<=11360, "North Queens",
ifelse(zip>=11365 & zip<=11367, "Central Queens",
ifelse(zip==11436 | zip==11423 | (zip>=11432 & zip<=11436), "Jamaica",
ifelse(zip>=11101 & zip<=11106, "Northwest Queens",
ifelse(zip==11374 | zip==11375 | zip==11379 | zip==11385, "West Central Queens",
ifelse(zip==11004 | zip==11005 | zip==11411 | zip==11422 | (zip>=11426 & zip<=11429), "Southest Queens",
ifelse(zip>=11413 & zip<=11421, "Southwest Queens",
ifelse(zip==11368 | zip==11369 | zip==11370 | zip==11372 | zip==11373 | zip==11377 | zip==11378, "West Queens", NA))))))))))) %<>%
#Group years and decades rather than individual years
mutate(approx_decade_built = as.factor(
ifelse(approx_year_built>=1910 & approx_year_built<1920, "1910s",
ifelse(approx_year_built>=1920 & approx_year_built<1930, "1920s",
ifelse(approx_year_built>=1930 & approx_year_built<1940, "1930s",
ifelse(approx_year_built>=1940 & approx_year_built<1950, "1940s",
ifelse(approx_year_built>=1950 & approx_year_built<1960, "1950s",
ifelse(approx_year_built>=1960 & approx_year_built<1970, "1960s",
ifelse(approx_year_built>=1970 & approx_year_built<1980, "1970s",
ifelse(approx_year_built>=1980 & approx_year_built<1990, "1980s",
ifelse(approx_year_built>=1990 & approx_year_built<2000, "1990s",
ifelse(approx_year_built>=2000 & approx_year_built<2010, "2000s",
ifelse(approx_year_built>=2010 & approx_year_built<2020, "2010s", NA ))))))))))))) %<>%
select(-c(zip, approx_year_built)) #no longer needed
#Arrange and Select for convienience
HousingData %<>%
arrange(area, approx_decade_built,
coop_else_condo, pets_allowed, garage_exists,
num_full_bathrooms,
num_bedrooms, dining_room_type,
fuel_type, kitchen_type,
num_total_rooms,
num_floors_in_building,
walk_score,
fees,
sq_footage,
sale_price) %<>%
select(area,approx_decade_built,
coop_else_condo, pets_allowed, garage_exists,
num_full_bathrooms,
num_bedrooms, dining_room_type,
fuel_type, kitchen_type,
num_total_rooms,
num_floors_in_building,
walk_score,
fees,
sq_footage,
sale_price)
#Remove any feature with more than 30% NAs
#round((colMeans(is.na(HousingData)))*100, 2)
HousingData = HousingData[, which(colMeans(!is.na(HousingData)) > 0.7)]
#table(HousingData$fees, useNA = "always")
HousingData
#import HousingData
HousingData = read.csv(file.path("housing_data_2016_2017.csv"), header = TRUE)
#Remove all observations without the Y components "sale_price"
HousingData = HousingData[!is.na(HousingData$sale_price), ]
#Remove Columns that are "Junk" or all NA's
HousingData %<>%
select(-c(HITId, HITTypeId, Title, Description, Keywords, Reward, CreationTime, MaxAssignments, RequesterAnnotation,
AssignmentDurationInSeconds, AutoApprovalDelayInSeconds, Expiration, NumberOfSimilarHITs, LifetimeInSeconds,
AssignmentId, WorkerId, AssignmentStatus, AcceptTime, SubmitTime, AutoApprovalTime, ApprovalTime, RejectionTime,
RequesterFeedback, WorkTimeInSeconds, LifetimeApprovalRate, Last30DaysApprovalRate, Last7DaysApprovalRate,
date_of_sale, url, full_address_or_zip_code, model_type, listing_price_to_nearest_1000, community_district_num))
HousingData %<>%
#tolower to fix varying answer capitalizatoin formats
mutate_at( c("cats_allowed", "dogs_allowed", "coop_condo", "dining_room_type", "fuel_type", "kitchen_type"), tolower) %<>%
#Strip Currency Symbols to make numeric features
mutate(common_charges = as.numeric(gsub("\\$", "", common_charges))) %<>%
mutate(maintenance_cost = as.numeric(gsub("\\$", "", maintenance_cost))) %<>%
mutate(parking_charges = as.numeric(gsub("\\$", "", parking_charges))) %<>%
mutate(sale_price = gsub("\\$", "", sale_price)) %<>%
mutate(sale_price = as.numeric(gsub("\\,", "", sale_price))) %<>%
mutate(total_taxes = as.numeric(gsub("\\$", "", total_taxes))) %<>%
#Fix issues with various synonoms for "yes"
mutate(cats_allowed =  ifelse(cats_allowed == "no", 0, 1)) %<>% #Due to multiple yes values we use no to make binary
mutate(dogs_allowed = ifelse(dogs_allowed == "no", 0, 1)) %<>%
#Create a more convienient, possibly more influential variable
mutate(pets_allowed = ifelse(cats_allowed + dogs_allowed == 0, 0, 1)) %<>%
mutate(fees = ifelse( is.na(common_charges) & is.na(maintenance_cost),  NA,
ifelse( is.na(common_charges), maintenance_cost,
ifelse( is.na(maintenance_cost), common_charges, maintenance_cost + common_charges )))) %<>%
select(-c(cats_allowed, dogs_allowed, common_charges, maintenance_cost)) %<>% #no longer needed
mutate(garage_exists = ifelse( is.na(garage_exists), 0, 1)) %<>%
mutate(coop_else_condo = ifelse(coop_condo == "condo", 0, 1)) %<>%
select(-coop_condo) %<>% #no longer needed
#Fix inconsistent location entries, extracted zip codes from URL
mutate(zip = as.numeric( str_extract( sapply(URL, substring, 45,  150), "\\d{5}"))) %<>%
select(-(URL)) %<>% #no longer needed
#Turns chars into factors
mutate(dining_room_type = as.factor(dining_room_type)) %<>%
mutate(fuel_type = as.factor(fuel_type)) %<>%
mutate(kitchen_type = as.factor(kitchen_type)) %<>%
mutate(fuel_type = as.factor(fuel_type)) %<>%
#Group zip codes instead of having several factors and remove any non-Queens zipcodes if there are any
mutate(area = as.factor(
ifelse(zip>=11361 & zip<=11364, "Northeast Queens",
ifelse(zip>=11354 & zip<=11360, "North Queens",
ifelse(zip>=11365 & zip<=11367, "Central Queens",
ifelse(zip==11436 | zip==11423 | (zip>=11432 & zip<=11436), "Jamaica",
ifelse(zip>=11101 & zip<=11106, "Northwest Queens",
ifelse(zip==11374 | zip==11375 | zip==11379 | zip==11385, "West Central Queens",
ifelse(zip==11004 | zip==11005 | zip==11411 | zip==11422 | (zip>=11426 & zip<=11429), "Southest Queens",
ifelse(zip>=11413 & zip<=11421, "Southwest Queens",
ifelse(zip==11368 | zip==11369 | zip==11370 | zip==11372 | zip==11373 | zip==11377 | zip==11378, "West Queens", NA))))))))))) %<>%
#Group years and decades rather than individual years
mutate(approx_decade_built = as.factor(
ifelse(approx_year_built>=1910 & approx_year_built<1920, "1910s",
ifelse(approx_year_built>=1920 & approx_year_built<1930, "1920s",
ifelse(approx_year_built>=1930 & approx_year_built<1940, "1930s",
ifelse(approx_year_built>=1940 & approx_year_built<1950, "1940s",
ifelse(approx_year_built>=1950 & approx_year_built<1960, "1950s",
ifelse(approx_year_built>=1960 & approx_year_built<1970, "1960s",
ifelse(approx_year_built>=1970 & approx_year_built<1980, "1970s",
ifelse(approx_year_built>=1980 & approx_year_built<1990, "1980s",
ifelse(approx_year_built>=1990 & approx_year_built<2000, "1990s",
ifelse(approx_year_built>=2000 & approx_year_built<2010, "2000s",
ifelse(approx_year_built>=2010 & approx_year_built<2020, "2010s", NA ))))))))))))) %<>%
select(-c(zip, approx_year_built)) #no longer needed
#Arrange and Select for convienience
HousingData %<>%
arrange(area, approx_decade_built,
coop_else_condo, pets_allowed, garage_exists,
num_full_bathrooms,
num_bedrooms, dining_room_type,
fuel_type, kitchen_type,
num_total_rooms,
num_floors_in_building,
walk_score,
fees,
sq_footage,
sale_price) %<>%
select(area,approx_decade_built,
coop_else_condo, pets_allowed, garage_exists,
num_full_bathrooms,
num_bedrooms, dining_room_type,
fuel_type, kitchen_type,
num_total_rooms,
num_floors_in_building,
walk_score,
fees,
sq_footage,
sale_price)
#Remove any feature with more than 30% NAs
#round((colMeans(is.na(HousingData)))*100, 2)
HousingData = HousingData[, which(colMeans(!is.na(HousingData)) > 0.7)]
#table(HousingData$fees, useNA = "always")
HousingData
#Y = Response Variable; X = Features
y = HousingData$sale_price
X = HousingData %>%
select(-sale_price)
#Create Missingness Binary Features and Impute Missing Data
M = tbl_df(apply(is.na(X), 2, as.numeric))
colnames(M) = paste("is_missing_", colnames(X), sep = "")
M = tbl_df(t(unique(t(M))))
M %<>%
select_if(function(x){sum(x) > 0})
Ximp = missForest(data.frame(X), sampsize = rep(200, ncol(X)))$ximp
Ximp_and_missing_dummies = data.frame(cbind(Ximp, M))
#Set New Data
newdata = cbind(Ximp_and_missing_dummies, y)
newdata %<>%
rename(sale_price = y) %<>%
select(sale_price, everything())
X = newdata[ ,2:ncol(newdata)]
y = newdata[ ,1]
#Split Data into Test and Train Indices
prop_test = 0.2
test_indices = sample(1 : nrow(newdata), round(prop_test * nrow(newdata)))
test_indices = sample(1 : nrow(newdata), round(prop_test * nrow(newdata)))
newdata_test = newdata[test_indices, ]
y_test = newdata_test[ ,1]
X_test = newdata_test[ ,2:ncol(newdata_test)]
train_indices = setdiff(1 : nrow(newdata), test_indices)
newdata_train = newdata[train_indices, ]
y_train = newdata_train[ ,1]
X_train = newdata_train[ ,2:ncol(newdata_train)]
#Bagging and Regression Trees (Random Forest)
num_trees = 500
optimal_mtry = tuneRF(X, y, mtryStart = 1, ntreeTry = num_trees, stepFactor =  2, plot = FALSE, doBest = FALSE)
mod_bag = YARF(X_test, y_test, num_trees = num_trees, calculate_oob_error = FALSE, mtry = optimal_mtry[nrow(optimal_mtry)])
mod_rf = YARF(X_test, y_test, num_trees = num_trees, calculate_oob_error = FALSE, mtry = optimal_mtry[nrow(optimal_mtry)])
YARF_update_with_oob_results(mod_bag)
YARF_update_with_oob_results(mod_rf)
rmse_bag = sd(y_test - predict(mod_bag, data.frame(X_test)))
rmse_rf = sd(y_test - predict(mod_rf, (X_test)))
cat("\nrmse_bag:", rmse_bag, "\nrmse_rf:", rmse_rf, "\n\ngain:", (rmse_bag - rmse_rf) / rmse_bag * 100, "%\n")
